{"version":3,"sources":["webpack:///./js/task-1.js","webpack:///./js/task-2.js","webpack:///./js/task-3.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","errorMsg","error","then","catch","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","id","logSuccess","logError","warn","amount"],"mappings":"2JAAMA,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACTF,EAAQF,GACRG,EAAO,WACNH,OAIDK,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OACjBG,EAAW,SAAAC,GAAK,OAAIH,QAAQC,IAAIE,IAGtCX,EAAM,KAAMY,KAAKN,GAAQO,MAAMH,GAC/BV,EAAM,KAAMY,KAAKN,GAAQO,MAAMH,GAC/BV,EAAM,MAAMY,KAAKN,GAAQO,MAAMH,G,kCCfzBI,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAIjB,SAAQ,SAACC,EAASC,GAI3BD,EAHoBe,EAASE,KAAI,SAAAC,GAAI,OACnCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,MAG/DjB,EAAO,YAILE,EAAS,SAAAgB,GAAY,OAAId,QAAQe,MAAMD,IACvCZ,EAAW,SAAAC,GAAK,OAAIH,QAAQC,IAAIE,IAItCM,EAAgBH,EAAO,SAASF,KAAKN,GAAQO,MAAMH,GACnDO,EAAgBH,EAAO,OAAOF,KAAKN,GAAQO,MAAMH,GCvBjD,IAIMc,EAAkB,SAAAC,GACtB,OAAO,IAAIvB,SAAQ,SAACC,EAASC,GAC3B,IAN+BsB,EAAKC,EAM9B3B,GANyB0B,EAMS,IANJC,EAMS,IALxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAOlDrB,YAAW,WACUuB,KAAKE,SAAW,IAGjC3B,EAAQ,CACN4B,GAAIN,EAAYM,GAChBxB,KAAMP,IAGVI,EAAOqB,EAAYM,MAClB/B,OAIDgC,EAAa,SAAC,GAAiB,IAAfD,EAAe,EAAfA,GAAIxB,EAAW,EAAXA,KACxBC,QAAQC,IAAR,eAA2BsB,EAA3B,iBAA8CxB,EAA9C,OAGI0B,EAAW,SAAAF,GACfvB,QAAQ0B,KAAR,gCAA6CH,EAA7C,8BAMFP,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYnB,MAAMoB,GAChET,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYnB,MAAMoB,GAChET,EAAgB,CAAEO,GAAI,GAAII,OAAQ,KAAMvB,KAAKoB,GAAYnB,MAAMoB,GAC/DT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYnB,MAAMoB,K","file":"main.2884939893f5fce10727.js","sourcesContent":["const delay = ms => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(ms);\n      reject('error');\n    }, ms);\n  });\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\nconst errorMsg = error => console.log(error);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger).catch(errorMsg); // Resolved after 2000ms\ndelay(1000).then(logger).catch(errorMsg); // Resolved after 1000ms\ndelay(1500).then(logger).catch(errorMsg); // Resolved after 1500ms\n","const users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  return new Promise((resolve, reject) => {\n    const toggleUsers = allUsers.map(user =>\n      user.name === userName ? { ...user, active: !user.active } : user,\n    );\n    resolve(toggleUsers);\n    reject('Упс!');\n  });\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\nconst errorMsg = error => console.log(error);\n/*\n * Должно работать так\n */\ntoggleUserState(users, 'Mango').then(logger).catch(errorMsg);\ntoggleUserState(users, 'Lux').then(logger).catch(errorMsg);\n","const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  return new Promise((resolve, reject) => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve({\n          id: transaction.id,\n          time: delay,\n        });\n      }\n      reject(transaction.id);\n    }, delay);\n  });\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n"],"sourceRoot":""}